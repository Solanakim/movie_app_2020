{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAsCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACA,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBL,UAAU,gBAA1B,SACGI,GADMC,QAKb,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBC+IKC,G,kNA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEACmCC,IAAMC,IAAI,yEAD7C,gBACcJ,EADd,EACFK,KAAQA,KAAQL,OACxB,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAFzB,2C,kEAUVQ,KAAKN,c,+BAGG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACI,qBAAKT,UAAU,SAAf,SACD,sBAAMA,UAAU,cAAhB,2BAGA,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVvB,KAAMsB,EAAMtB,KACZD,MAAOuB,EAAMvB,MACbE,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GA/BXE,IAAMC,YCrHxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,a","file":"static/js/main.17541989.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n\r\n//component가 state가 필요 없으면 function component를 사용한다. \r\n//if component doesnt need to have state we can use function component instead of className component \r\n\r\n\r\nfunction Movie({ title, year, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default Movie;","// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// function Food({ name, picture, rating }) {     //component have to start with Capital letter\n//   console.log(rating);\n//   return <div>\n//     <h2>I love {name}</h2>\n//     <h4>rating: {rating}/5.0</h4>\n//     <img src={picture} alt={name} />\n//   </div>;\n// }\n\n// Food.propTypes = {                         //propTypes's name should be \"propTypes\"!\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number.isRequired,\n// }\n\n// const foodILike = [\n//   {\n//     id: 1,     //react의 모든 element들은 다르게 보일 필요가 있다. \n//     name: \"떡볶이\",\n//     image: \"https://recipe1.ezmember.co.kr/cache/recipe/2016/10/07/f43063e718c49d85ddce4880e4a41fcd1.jpg\",\n//     rating: 5\n//   },\n//   {\n//     id: 2,\n//     name: \"순대\",\n//     image: \"https://t1.daumcdn.net/liveboard/dailylife/8fd37dea7c2e410ebe5638503051b175.jpg\",\n//     rating: 5\n//   },\n//   {\n//     id: 3,\n//     name: \"허니콤보\",\n//     image: \"https://t1.daumcdn.net/cfile/tistory/9994533B5DF3952F34\",\n//     rating: 5\n//   },\n//   {\n//     id: 4,\n//     name: \"피자\",\n//     image: \"https://static.hubzum.zumst.com/hubzum/2020/03/26/15/98dcb59478a842aaafb8cc2a6a707ba4_780x584.jpg\",\n//     rating: 4\n//   },\n//   {\n//     id: 5,\n//     name: \"김밥\",\n//     image: \"https://recipe1.ezmember.co.kr/cache/recipe/2016/06/29/e7401296033ab8e4297cd53d71e1bba91.jpg\",\n//     rating: 4\n//   }\n// ]\n\n// function renderFood(dish) {\n//   return <Food key={dish.id} name={dish.name} picture={dish.image}></Food>  //key prop for React Internal Use!\n// }\n\n// function App() {\n//   return (\n//     <div classNameName=\"App\">\n//       {<Food\n//         fav=\"tteokbokki\"\n//         something={true}\n//         blah={[\"array\", 1, 2, 3, 4,]}\n//       />\n//       {foodILike.map(renderFood)} }\n//       {foodILike.map(dish =>\n//         <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />\n//       )}\n\n//     </div>\n//   );\n// }\n\n// export default App;       //function component, #2 JSX & Props\n\n\n// import React from \"react\";\n// import PropTypes from \"prop-types\";\n\n// className App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     console.log(\"hello - constructor \");\n//   }\n\n//   state = {\n//     count: 0\n//   };\n\n//   add = () => {\n//     this.setState(current => ({ count: current.count + 1 })); {/*매순간 setState를 호출할 때 마다 react는 새로운 state와 함께 render function을 호출*/ }\n//   };\n//   minus = () => {\n//     this.setState(current => ({ count: current.count - 1 })); {/*{count: this.state.count + 1}*/ }\n//   };\n//   componentDidMount() {\n//     console.log(\"component rendered\");\n//   }\n//   componentDidUpdate(){\n//     console.log(\"I just updated\");\n//   }\n//   componentWillUnmount(){\n//     console.log(\"Goodbye, cruel world\");\n//   }\n\n//   render() {\n//     console.log(\"I'm rendering\");\n//     return <div>\n//       <h1>The number is : {this.state.count}</h1>\n//       <button onClick={this.add}>Add</button>  {/*this.add() is for Immediate call */}\n//       <button onClick={this.minus}>Minus</button>\n//     </div>;\n//   }\n// }\n\n// export default App;       //#3 State\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");     //비동기 ,get으로 가져온 것의.data.data.movies 표기, ES6 최신 문법\n    this.setState({ movies, isLoading: false });\n  }\n\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState({isLoading = false})\n    // },6000);\n\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;      //this.movies.state.movies or {movies}\n    return (\n      <section className=\"container\">\n        {isLoading\n          ? (<div className=\"loader\">\n            <span className=\"loader_text\">Loading....</span>\n          </div>)\n          : (\n            <div className=\"movies\">\n              {movies.map(movie => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image} \n                  genres={movie.genres}/> //axios.get 한 것을 Movie.js로 export \n              ))}\n            </div>\n           )}   \n      </section>);     //map should have return something\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('potato')\n);  //only render ONE component \n\n\n"],"sourceRoot":""}